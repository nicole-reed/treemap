{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","a","axios","get","data","treeMap","console","log","root","d3","treemapLayout","size","sum","d","value","consoles","children","map","item","name","colors","colorScale","domain","range","append","attr","selectAll","descendants","enter","x0","y0","x1","y1","category","style","text","legend","legendColors","i","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a9b1f37.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport * as d3 from 'd3';\nimport './App.css';\n\nfunction App() {\n\n  useEffect(async () => {\n    try {\n      const data = await axios.get('https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/video-game-sales-data.json')\n      // console.log(data)\n      treeMap(data.data)\n      // drawMap(countiesResponse.data, educationResponse.data)\n    } catch (error) {\n      console.log('error fetching data:\\n', error)\n    }\n  }, [])\n\n  const treeMap = (data) => {\n    // console.log('data', data)\n    const root = d3.hierarchy(data);\n    // console.log('root', root)\n    const treemapLayout = d3.treemap();\n\n    treemapLayout\n      .size([1000, 600])\n\n    root.sum((d) => d.value);\n    // console.log('root modified', root)\n\n    treemapLayout(root)\n    // console.log('root.children', root.children)\n\n    const consoles = root.children.map((item) => item.data.name)\n    console.log('consoles', consoles)\n\n    const colors = ['3f3d3d', '#86cc86e7', '#9a9ad4', '#c78cc7', '#ffc0cb', '#e9fa8b',\n      '#85eeb9', '#fac61c', '#f06f6f', '#fc3085ef', '#75a0a0', '#a7d69e',\n      '#b64545', '#aaa7a7', '#01c483', '#d644d6', '#45a4f1', '#fafa4f'];\n    const colorScale = d3.scaleOrdinal()\n      .domain(consoles)\n      .range(colors);\n\n    const svg = d3.select('#chart')\n      .append('svg')\n      .attr('width', 1000)\n      .attr('height', 600);\n\n    svg.selectAll('rect')\n      .data(root.descendants())\n      .enter()\n      .append('rect')\n      .attr('x', function (d) { return d.x0; })\n      .attr('y', function (d) { return d.y0; })\n      .attr('width', function (d) { return d.x1 - d.x0; })\n      .attr('height', function (d) { return d.y1 - d.y0; })\n      .attr('class', 'tile')\n      .attr('data-name', (d) => d.data.name)\n      .attr('data-category', (d) => d.data.category)\n      .attr('data-value', (d) => d.data.value)\n      .style('fill', d => d.data.category ? colorScale(d.data.category) : 'white')\n      .style('stroke', 'white')\n      .append(\"title\")\n      .attr('id', 'tooltip')\n      .attr('data-value', (d) => d.data.value)\n      .text((d) => `Game: ${d.data.name}\\nConsole: ${d.data.category}\\n Value: ${d.data.value}`);\n\n    const legend = d3.select('#legend')\n      .append('svg')\n      .attr('width', 100)\n      .attr('height', 600)\n\n    const legendColors = d3.scaleOrdinal()\n      .domain(consoles)\n      .range(colors);\n\n    legend.selectAll('rect')\n      .data(consoles)\n      .enter()\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', (d, i) => i * 30)\n      .attr('class', 'legend-item')\n      .attr('width', 20)\n      .attr('height', 20)\n      .style('fill', (d) => legendColors(d))\n\n    legend.selectAll('text')\n      .data(consoles)\n      .enter()\n      .append('text')\n      .attr('x', 20)\n      .attr('y', (d, i) => 12 + (i * 30))\n      .text((d) => d)\n      .style(\"alignment-baseline\", \"middle\")\n      .style('font-size', '15px')\n\n\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 id='title'>100 Most Popular Video Games</h1>\n      <p id='description'>Grouped By Gaming Console</p>\n      <div id='styling'>\n        <div id='chart'></div>\n        <div id='legend'></div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}